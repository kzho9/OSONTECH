name: CD Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and Push Docker Images
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata for frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Server
  deploy:
    name: Deploy to Production Server
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment package
        run: |
          mkdir deployment
          cp docker-compose.yml deployment/
          cp nginx.conf deployment/
          cp .env.example deployment/
          
          # Create deployment script
          cat << 'EOF' > deployment/deploy.sh
          #!/bin/bash
          set -e
          
          echo "üöÄ Starting deployment..."
          
          # Pull latest images
          echo "üì¶ Pulling latest Docker images..."
          docker-compose pull
          
          # Stop existing containers
          echo "üõë Stopping existing containers..."
          docker-compose down --remove-orphans
          
          # Start services
          echo "üîÑ Starting services..."
          docker-compose up -d
          
          # Wait for services to be healthy
          echo "üè• Waiting for services to be healthy..."
          timeout 300 bash -c 'until docker-compose ps | grep -q "healthy"; do sleep 5; done'
          
          # Run database migrations if needed
          echo "üîÑ Running database migrations..."
          docker-compose exec -T backend npm run prisma:migrate deploy || echo "No migrations to run"
          
          # Clean up unused images
          echo "üßπ Cleaning up..."
          docker image prune -f
          
          echo "‚úÖ Deployment completed successfully!"
          EOF
          
          chmod +x deployment/deploy.sh

      - name: Upload deployment package
        uses: actions/upload-artifact@v3
        with:
          name: deployment-package
          path: deployment/

      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            # Create app directory if it doesn't exist
            mkdir -p ~/oson-vpn
            cd ~/oson-vpn
            
            # Backup current deployment
            if [ -f docker-compose.yml ]; then
              echo "üì¶ Creating backup..."
              tar -czf backup-$(date +%Y%m%d-%H%M%S).tar.gz . --exclude='*.log' --exclude='backup-*.tar.gz'
              # Keep only last 5 backups
              ls -t backup-*.tar.gz | tail -n +6 | xargs -r rm --
            fi

      - name: Download deployment package to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          source: "deployment/*"
          target: "~/oson-vpn/"
          strip_components: 1

      - name: Execute deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            cd ~/oson-vpn
            
            # Make sure .env exists
            if [ ! -f .env ]; then
              echo "‚ö†Ô∏è  .env file not found. Copying from example..."
              cp .env.example .env
              echo "üîß Please configure .env file with your settings!"
            fi
            
            # Set image tags for latest deployment
            export BACKEND_IMAGE="${{ needs.build-and-push.outputs.backend-image }}"
            export FRONTEND_IMAGE="${{ needs.build-and-push.outputs.frontend-image }}"
            
            # Update docker-compose to use specific image tags
            sed -i "s|build:|# build:|g" docker-compose.yml
            sed -i "s|context:|# context:|g" docker-compose.yml
            sed -i "s|dockerfile:|# dockerfile:|g" docker-compose.yml
            
            # Add image tags
            sed -i "/backend:/a\\    image: ${BACKEND_IMAGE}" docker-compose.yml
            sed -i "/frontend:/a\\    image: ${FRONTEND_IMAGE}" docker-compose.yml
            
            # Run deployment
            chmod +x deploy.sh
            ./deploy.sh

  # Health Check
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: deploy
    
    steps:
      - name: Wait for services to be ready
        run: sleep 30

      - name: Check backend health
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.SERVER_HOST }}/health || echo "000")
          if [ "$response" != "200" ]; then
            echo "‚ùå Backend health check failed with status: $response"
            exit 1
          fi
          echo "‚úÖ Backend is healthy"

      - name: Check frontend accessibility
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.SERVER_HOST }} || echo "000")
          if [ "$response" != "200" ]; then
            echo "‚ùå Frontend accessibility check failed with status: $response"
            exit 1
          fi
          echo "‚úÖ Frontend is accessible"

  # Notification
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy, health-check]
    if: always()
    
    steps:
      - name: Notify successful deployment
        if: ${{ needs.deploy.result == 'success' && needs.health-check.result == 'success' }}
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            üöÄ Deployment Successful!
            
            Environment: ${{ github.event.inputs.environment || 'production' }}
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            
            üåê Application is live: http://${{ secrets.SERVER_HOST }}
            üìä Health check: http://${{ secrets.SERVER_HOST }}/health

      - name: Notify deployment failure
        if: ${{ needs.deploy.result == 'failure' || needs.health-check.result == 'failure' }}
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            ‚ùå Deployment Failed!
            
            Environment: ${{ github.event.inputs.environment || 'production' }}
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            
            Please check the logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            Manual intervention may be required on the server.