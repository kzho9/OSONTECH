version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: oson-vpn-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: oson_vpn
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - oson-vpn-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: oson-vpn-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - oson-vpn-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: oson-vpn-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3001
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-postgres123}@postgres:5432/oson_vpn?schema=public
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-15m}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-7d}
      SENTRY_DSN: ${SENTRY_DSN:-}
      EMAIL_FROM: ${EMAIL_FROM:-noreply@osonvpn.com}
      EMAIL_HOST: ${EMAIL_HOST:-smtp.gmail.com}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_USER: ${EMAIL_USER:-}
      EMAIL_PASS: ${EMAIL_PASS:-}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN:-}
      TELEGRAM_CHAT_ID: ${TELEGRAM_CHAT_ID:-}
      MARZBAN_BASE_URL: ${MARZBAN_BASE_URL:-}
      MARZBAN_USERNAME: ${MARZBAN_USERNAME:-}
      MARZBAN_PASSWORD: ${MARZBAN_PASSWORD:-}
      CLICK_MERCHANT_ID: ${CLICK_MERCHANT_ID:-}
      CLICK_SECRET_KEY: ${CLICK_SECRET_KEY:-}
      PAYME_MERCHANT_ID: ${PAYME_MERCHANT_ID:-}
      PAYME_SECRET_KEY: ${PAYME_SECRET_KEY:-}
      FRONTEND_URLS: ${FRONTEND_URLS:-http://localhost:3000}
      ADMIN_EMAILS: ${ADMIN_EMAILS:-admin@osonvpn.com}
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - oson-vpn-network
    volumes:
      - ./backend/uploads:/app/uploads
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Next.js
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: oson-vpn-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3001}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      - backend
    networks:
      - oson-vpn-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: oson-vpn-nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - oson-vpn-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  oson-vpn-network:
    driver: bridge